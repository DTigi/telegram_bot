from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder

import logging
from environs import Env


env = Env()
env.read_env()

BOT_TOKEN = env("BOT_TOKEN")


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
button1 = KeyboardButton(text="–°–æ–±–∞–∫ ü¶Æ")
button2 = KeyboardButton(text="–û–≥—É—Ä—Ü–æ–≤ ü•í")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏
keyboard = ReplyKeyboardMarkup(
    keyboard=[[button1, button2]], resize_keyboard=True, one_time_keyboard=True
)

################################################################################
### –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–º–æ—â—å—é –±–∏–ª–¥–µ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ReplyKeyboardBuilder() ###
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb_builder = ReplyKeyboardBuilder()

# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∏–º–µ—Ä —Å 10 –∫–Ω–æ–ø–∫–∞–º–∏
buttons = [KeyboardButton(text=f"–ö–Ω–æ–ø–∫–∞ {i + 1}") for i in range(10)]

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä, —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ
# –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –∫–Ω–æ–ø–∫–∏
kb_builder.row(*buttons, width=4)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
        text="–í–æ—Ç —Ç–∞–∫–∞—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
        reply_markup=kb_builder.as_markup(
            resize_keyboard=True
        ),  # –º–µ—Ç–æ–¥ –±–∏–ª–¥–µ—Ä–∞ as_markup() –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –±–∏–ª–¥–µ—Ä –≤ –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ReplyKeyboardMarkup
    )


#############################################################################


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text="–ß–µ–≥–æ –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è –±–æ–ª—å—à–µ?", reply_markup=keyboard)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–°–æ–±–∞–∫ ü¶Æ" –∏ —É–¥–∞–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(F.text == "–°–æ–±–∞–∫ ü¶Æ")
async def procces_dog_answer(message: Message):
    await message.answer(
        text="–î–∞, –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ, –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è —Å–æ–±–∞–∫.\n–ù–æ –≤—ã –≤–∏–¥–µ–ª–∏ –∫–∞–∫ –æ–Ω–∏ –±–æ—è—Ç—Å—è –æ–≥—É—Ä—Ü–æ–≤?",
        # reply_markup=ReplyKeyboardRemove(),
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–û–≥—É—Ä—Ü–æ–≤ ü•í" –∏ —É–¥–∞–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(F.text == "–û–≥—É—Ä—Ü–æ–≤ ü•í")
async def process_cucumber_answer(message: Message):
    await message.answer(
        text="–î–∞, –∏–Ω–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –æ–≥—É—Ä—Ü–æ–≤ " "–∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è –±–æ–ª—å—à–µ",
        # reply_markup=ReplyKeyboardRemove(),
    )


if __name__ == "__main__":
    dp.run_polling(bot)
